#version 450
layout(local_size_x=16,local_size_y=16)in;
layout(binding = 0,rgba8) uniform writeonly image2D resultImage;
layout(binding=1) uniform UBO{
	float imageWidth;
	float imageHeight;
	float viewportWidth;
	float viewportHeight;
	float focalLength;
}ubo;

struct Ray{
	vec3 orig;
	vec3 dir;
};

vec3 rayAt(Ray ray,float t){
	return ray.orig + t*ray.dir;
}

float hitSphere(vec3 center,float radius,inout Ray ray)
{
	//solve quadratic equation
	vec3 oc = ray.orig - center;
	float a = dot(ray.dir,ray.dir);
	float b = 2.0 * dot(oc,ray.dir);
	float c = dot(oc,oc) - radius * radius;
	float discriminant = b*b - 4*a*c;
	if(discriminant<0){
		return -1.0;
	}
	return (-b-sqrt(discriminant))/(2.0*a);
}


vec3 rayColor(inout Ray ray){
	vec3 sphereOrigin=vec3(0,0,-1);
	float t = hitSphere(sphereOrigin,0.5,ray);
	if(t>0.0){
		vec3 r = ray.orig + ray.dir*t;
		vec3 N = normalize(r-vec3(0.0,0.0,-1));
		return 0.5*vec3(N.x+1,N.y+1,N.z+1);
	}
	
	vec3 unitDir = normalize(ray.dir);
	t = 0.5*(unitDir.y+1.0);
	return (1.0-t)*vec3(1.0,1.0,1.0)+t*vec3(0.5,0.7,1.0);
}



void main(){
	vec3 origin = vec3(0,0,0);
	vec3 horizontal = vec3(ubo.viewportWidth,0,0);
	vec3 vertical = vec3(0,ubo.viewportHeight,0);
	vec3 lowerLeftCorner = origin - horizontal/2 - vertical/2-vec3(0,0,ubo.focalLength);
	float u = gl_GlobalInvocationID.x/(ubo.imageWidth-1);
	float v = gl_GlobalInvocationID.y/(ubo.imageHeight-1);
	Ray ray;
	ray.orig = origin;
	ray.dir = lowerLeftCorner+u * horizontal + v * vertical-origin;
	vec3 color = rayColor(ray);
	//vec3 unitDir = normalize(lowerLeftCorner + uv.x * horizontal + uv.y * vertical-origin);
	//float t = 0.5 * (unitDir.y+1.0);
	//vec3 color = (1.0-t)*vec3(1.0,1.0,1.0)+t*vec3(0.5,0.7,1.0);
	imageStore(resultImage,ivec2(gl_GlobalInvocationID.xy), vec4(color,0.0));
}